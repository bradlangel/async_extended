# OASIS_START
# DO NOT EDIT (digest: 84eadf414ea1e50b7a7b7af6fe381cc2)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library async_extended
"lib/async_extended.cmxs": use_async_extended
"lib/any_error.cmx": for-pack(Async_extended)
"lib/async_cbreak.cmx": for-pack(Async_extended)
"lib/async_gzip.cmx": for-pack(Async_extended)
"lib/async_heap.cmx": for-pack(Async_extended)
"lib/async_mutex.cmx": for-pack(Async_extended)
"lib/cml.cmx": for-pack(Async_extended)
"lib/coalesced_throttle.cmx": for-pack(Async_extended)
"lib/command_rpc.cmx": for-pack(Async_extended)
"lib/cpu_load.cmx": for-pack(Async_extended)
"lib/deferred_list.cmx": for-pack(Async_extended)
"lib/delimited.cmx": for-pack(Async_extended)
"lib/deprecated_async_bench.cmx": for-pack(Async_extended)
"lib/durable.cmx": for-pack(Async_extended)
"lib/durable_subscription.cmx": for-pack(Async_extended)
"lib/embedded_script.cmx": for-pack(Async_extended)
"lib/enforcer.cmx": for-pack(Async_extended)
"lib/extended_log.cmx": for-pack(Async_extended)
"lib/fd_leak_check.cmx": for-pack(Async_extended)
"lib/file_updates.cmx": for-pack(Async_extended)
"lib/generator.cmx": for-pack(Async_extended)
"lib/interactive_edit.cmx": for-pack(Async_extended)
"lib/interactive.cmx": for-pack(Async_extended)
"lib/mailbox.cmx": for-pack(Async_extended)
"lib/pipe_zipper.cmx": for-pack(Async_extended)
"lib/priority_queue.cmx": for-pack(Async_extended)
"lib/process.cmx": for-pack(Async_extended)
"lib/reader_ext.cmx": for-pack(Async_extended)
"lib/ref.cmx": for-pack(Async_extended)
"lib/resource.cmx": for-pack(Async_extended)
"lib/rpc_proxy.cmx": for-pack(Async_extended)
"lib/safe_pipe.cmx": for-pack(Async_extended)
"lib/semaphore.cmx": for-pack(Async_extended)
"lib/shutdown.cmx": for-pack(Async_extended)
"lib/signal.cmx": for-pack(Async_extended)
"lib/sound.cmx": for-pack(Async_extended)
"lib/std.cmx": for-pack(Async_extended)
"lib/synccast.cmx": for-pack(Async_extended)
"lib/udp.cmx": for-pack(Async_extended)
"lib/watcher.cmx": for-pack(Async_extended)
<lib/*.ml{,i,y}>: package(async)
<lib/*.ml{,i,y}>: package(camlzip)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(core.syntax)
<lib/*.ml{,i,y}>: package(core_extended)
<lib/*.ml{,i,y}>: package(pa_ounit)
<lib/*.ml{,i,y}>: package(pa_ounit.syntax)
<lib/*.ml{,i,y}>: package(pa_test)
<lib/*.ml{,i,y}>: package(pa_test.syntax)
<lib/*.ml{,i,y}>: package(textutils)
<lib/*.ml{,i,y}>: package(threads)
# Executable pause
<examples/pause.{native,byte}>: package(async)
<examples/pause.{native,byte}>: package(camlzip)
<examples/pause.{native,byte}>: package(core)
<examples/pause.{native,byte}>: package(core.syntax)
<examples/pause.{native,byte}>: package(core_extended)
<examples/pause.{native,byte}>: package(pa_ounit)
<examples/pause.{native,byte}>: package(pa_ounit.syntax)
<examples/pause.{native,byte}>: package(pa_test)
<examples/pause.{native,byte}>: package(pa_test.syntax)
<examples/pause.{native,byte}>: package(textutils)
<examples/pause.{native,byte}>: package(threads)
<examples/pause.{native,byte}>: use_async_extended
# Executable primes
<examples/primes.{native,byte}>: package(async)
<examples/primes.{native,byte}>: package(camlzip)
<examples/primes.{native,byte}>: package(core)
<examples/primes.{native,byte}>: package(core.syntax)
<examples/primes.{native,byte}>: package(core_extended)
<examples/primes.{native,byte}>: package(pa_ounit)
<examples/primes.{native,byte}>: package(pa_ounit.syntax)
<examples/primes.{native,byte}>: package(pa_test)
<examples/primes.{native,byte}>: package(pa_test.syntax)
<examples/primes.{native,byte}>: package(textutils)
<examples/primes.{native,byte}>: package(threads)
<examples/primes.{native,byte}>: use_async_extended
<examples/*.ml{,i,y}>: package(async)
<examples/*.ml{,i,y}>: package(camlzip)
<examples/*.ml{,i,y}>: package(core)
<examples/*.ml{,i,y}>: package(core.syntax)
<examples/*.ml{,i,y}>: package(core_extended)
<examples/*.ml{,i,y}>: package(pa_ounit)
<examples/*.ml{,i,y}>: package(pa_ounit.syntax)
<examples/*.ml{,i,y}>: package(pa_test)
<examples/*.ml{,i,y}>: package(pa_test.syntax)
<examples/*.ml{,i,y}>: package(textutils)
<examples/*.ml{,i,y}>: package(threads)
<examples/*.ml{,i,y}>: use_async_extended
# OASIS_STOP
<**/*.ml{,i}>: syntax_camlp4o, warn(-40)
