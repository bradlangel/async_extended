# OASIS_START
# DO NOT EDIT (digest: 615034a5f2940b4f8727b3314ddfe2b5)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library async_extended
"src/async_extended.cmxs": use_async_extended
"src/any_error.cmx": for-pack(Async_extended)
"src/async_cbreak.cmx": for-pack(Async_extended)
"src/async_gzip.cmx": for-pack(Async_extended)
"src/async_heap.cmx": for-pack(Async_extended)
"src/async_mutex.cmx": for-pack(Async_extended)
"src/cml.cmx": for-pack(Async_extended)
"src/coalesced_throttle.cmx": for-pack(Async_extended)
"src/command_rpc.cmx": for-pack(Async_extended)
"src/cpu_load.cmx": for-pack(Async_extended)
"src/deferred_list.cmx": for-pack(Async_extended)
"src/delimited.cmx": for-pack(Async_extended)
"src/deprecated_async_bench.cmx": for-pack(Async_extended)
"src/durable.cmx": for-pack(Async_extended)
"src/durable_subscription.cmx": for-pack(Async_extended)
"src/embedded_script.cmx": for-pack(Async_extended)
"src/enforcer.cmx": for-pack(Async_extended)
"src/extended_log.cmx": for-pack(Async_extended)
"src/fd_leak_check.cmx": for-pack(Async_extended)
"src/file_updates.cmx": for-pack(Async_extended)
"src/generator.cmx": for-pack(Async_extended)
"src/interactive_edit.cmx": for-pack(Async_extended)
"src/interactive.cmx": for-pack(Async_extended)
"src/ltl.cmx": for-pack(Async_extended)
"src/mailbox.cmx": for-pack(Async_extended)
"src/pipe_zipper.cmx": for-pack(Async_extended)
"src/priority_queue.cmx": for-pack(Async_extended)
"src/process.cmx": for-pack(Async_extended)
"src/reader_ext.cmx": for-pack(Async_extended)
"src/ref.cmx": for-pack(Async_extended)
"src/resource.cmx": for-pack(Async_extended)
"src/rpc_proxy.cmx": for-pack(Async_extended)
"src/safe_pipe.cmx": for-pack(Async_extended)
"src/semaphore.cmx": for-pack(Async_extended)
"src/shutdown.cmx": for-pack(Async_extended)
"src/signal.cmx": for-pack(Async_extended)
"src/sound.cmx": for-pack(Async_extended)
"src/std.cmx": for-pack(Async_extended)
"src/synccast.cmx": for-pack(Async_extended)
"src/udp.cmx": for-pack(Async_extended)
"src/watcher.cmx": for-pack(Async_extended)
<src/*.ml{,i,y}>: package(async)
<src/*.ml{,i,y}>: package(camlzip)
<src/*.ml{,i,y}>: package(core)
<src/*.ml{,i,y}>: package(core.syntax)
<src/*.ml{,i,y}>: package(core_extended)
<src/*.ml{,i,y}>: package(pa_ounit)
<src/*.ml{,i,y}>: package(pa_ounit.syntax)
<src/*.ml{,i,y}>: package(pa_test)
<src/*.ml{,i,y}>: package(pa_test.syntax)
<src/*.ml{,i,y}>: package(textutils)
<src/*.ml{,i,y}>: package(threads)
# Executable pause
<example/pause.{native,byte}>: package(async)
<example/pause.{native,byte}>: package(camlzip)
<example/pause.{native,byte}>: package(core)
<example/pause.{native,byte}>: package(core.syntax)
<example/pause.{native,byte}>: package(core_extended)
<example/pause.{native,byte}>: package(pa_ounit)
<example/pause.{native,byte}>: package(pa_ounit.syntax)
<example/pause.{native,byte}>: package(pa_test)
<example/pause.{native,byte}>: package(pa_test.syntax)
<example/pause.{native,byte}>: package(textutils)
<example/pause.{native,byte}>: package(threads)
<example/pause.{native,byte}>: use_async_extended
# Executable primes
<example/primes.{native,byte}>: package(async)
<example/primes.{native,byte}>: package(camlzip)
<example/primes.{native,byte}>: package(core)
<example/primes.{native,byte}>: package(core.syntax)
<example/primes.{native,byte}>: package(core_extended)
<example/primes.{native,byte}>: package(pa_ounit)
<example/primes.{native,byte}>: package(pa_ounit.syntax)
<example/primes.{native,byte}>: package(pa_test)
<example/primes.{native,byte}>: package(pa_test.syntax)
<example/primes.{native,byte}>: package(textutils)
<example/primes.{native,byte}>: package(threads)
<example/primes.{native,byte}>: use_async_extended
<example/*.ml{,i,y}>: package(async)
<example/*.ml{,i,y}>: package(camlzip)
<example/*.ml{,i,y}>: package(core)
<example/*.ml{,i,y}>: package(core.syntax)
<example/*.ml{,i,y}>: package(core_extended)
<example/*.ml{,i,y}>: package(pa_ounit)
<example/*.ml{,i,y}>: package(pa_ounit.syntax)
<example/*.ml{,i,y}>: package(pa_test)
<example/*.ml{,i,y}>: package(pa_test.syntax)
<example/*.ml{,i,y}>: package(textutils)
<example/*.ml{,i,y}>: package(threads)
<example/*.ml{,i,y}>: use_async_extended
# OASIS_STOP
<**/*.ml{,i}>: syntax_camlp4o, warn(-40)
